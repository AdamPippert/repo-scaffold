#!/usr/bin/env bash
#
# generate_scaffold.sh
# --------------------
# Build a repo from an ASCII‑tree scaffold, document it, and commit.
#
# Usage:
#   ./generate_scaffold.sh [scaffold_file]
#   cat scaffold.txt | ./generate_scaffold.sh
#
set -euo pipefail

########################################
# 0. Configuration & helpers
########################################
DEBUG=${DEBUG:-0}
indent_unit=4 # tree output uses 4‑space blocks

log() { [ "$DEBUG" -eq 1 ] && echo ">> $*" >&2; }

trim() { sed -E 's/^[[:space:]]+|[[:space:]]+$//g'; }

########################################
# 1. Read scaffold (stdin or file arg)
########################################
if [ $# -gt 1 ]; then
  echo "Usage: $0 [scaffold_file]" >&2
  exit 1
fi

scaffold=$(cat "${1:-/dev/stdin}")
[ -z "$scaffold" ] && {
  echo "Empty scaffold supplied" >&2
  exit 1
}

########################################
# 2. Prep working vars
########################################
declare -a stack        # holds directory names by depth
# OS-aware associative array workaround
if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
  declare -A ignore_paths # set of entries destined for .gitignore
else
  # macOS (Bash 3.x) workaround
  ignore_paths_str="" # set of entries destined for .gitignore
fi
gitignore_line=""

########################################
# 3. First pass: create dirs/files & build .gitignore entries
########################################
while IFS= read -r raw; do
  # Ignore root dot line (`.`) if present
  [[ "$raw" =~ ^[[:space:]]*\.$ ]] && continue

  # Split comment if present
  path_part="${raw%%#*}"
  comment_part="$([ "$raw" == *'#'* ] && echo "${raw#*#}" | trim || echo "")"

  # Locate the '── ' marker (marks start of basename)
  marker_pos=$(awk -v a="$path_part" 'BEGIN{print index(a,"── ")}')
  [ "$marker_pos" -eq 0 ] && continue # skip malformed line

  # Calculate depth from indent
  prefix=${path_part:0:marker_pos-1}
  # Replace '│' with spaces so length is correct
  prefix=${prefix//│/ }
  depth=$((${#prefix} / indent_unit))

  # Extract basename, trim, strip drawing chars
  basename=$(echo "${path_part:marker_pos+3}" | trim)

  # Skip ellipsis placeholder
  [ "$basename" = "..." ] && continue

  # Assemble full path
  if [ "$depth" -eq 0 ]; then
    full="$basename"
  else
    # Build parent prefix
    parent=""
    for ((i = 0; i < depth; i++)); do
      [ -n "${stack[i]:-}" ] && parent+="${stack[i]}/"
    done
    full="${parent}${basename}"
  fi

  log "Depth=$depth  Base=$basename  Full=$full"

  # Create dir/file
  if [[ "$basename" == */ ]]; then
    dir="${full%/}"
    mkdir -p "$dir"
    stack[depth]="$dir"
  else
    dir=$(dirname "$full")
    mkdir -p "$dir"
    touch "$full"
  fi

  # Handle .gitignore line + generated dirs
  if [[ "$basename" == ".gitignore" ]]; then
    gitignore_line="$full"
    # split comma‑separated list after 'Excludes'
    if [[ "$comment_part" == Excludes* ]]; then
      extras=${comment_part#Excludes }
      IFS=',' read -ra arr <<<"$extras"
      if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
    for e in "${arr[@]}"; do ignore_paths["$(echo "$e" | trim)"]=1; done
  else
    for e in "${arr[@]}"; do ignore_paths_str+="$(echo "$e" | trim)\n"; done
  fi
    fi
  fi
  if [[ "$comment_part" == *"git‑ignored"* ]]; then
    # path itself should be ignored
    path_to_ignore="${full%/}/"
    if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
      ignore_paths["$path_to_ignore"]=1
    else
      ignore_paths_str+="$path_to_ignore\n"
    fi
  fi
done <<<"$scaffold"

########################################
# 4. Ensure specs/structure.md exists
########################################
if [ ! -d specs ]; then
  mkdir specs
  log "Added missing specs/ directory"
fi

echo '```text' >specs/structure.md
# Append scaffold; if specs/ was absent in original, note it.
echo "$scaffold" >>specs/structure.md
echo '```' >>specs/structure.md

########################################
# 5. Build (or append to) .gitignore
########################################
root_gitignore=".gitignore"
# create if not already touched
[ -f "$root_gitignore" ] || touch "$root_gitignore"

{
  printf "\n# Auto‑generated by generate_scaffold.sh\n"
  if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
    for p in "${!ignore_paths[@]}"; do echo "$p"; done | sort -u
  else
    echo -e "$ignore_paths_str" | sort -u
  fi
} >>"$root_gitignore"

########################################
# 6. Git initialise & commit
########################################
if [ ! -d .git ]; then
  git init -b main >/dev/null
fi
git add . >/dev/null
git commit -m "Initial scaffold generated" >/dev/null

echo "✔ Repository scaffold created and committed."
